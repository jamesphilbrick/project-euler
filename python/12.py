
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

from numba import jit

@jit(nopython=True)
def next_tri_num(n):
	num = 0
	for i in range(1, n+1):
		num += i
	return num

@jit(nopython=True)
def num_devisors(n):
	if n == 0:
		return 0
	elif n == 1:
		return 1

	devisors = 0
	for i in range(2, n-1):
		if n % i == 0:
			devisors += 1
		else:
			continue
	return devisors + 2 # every number will have 1 and itself as devisor, so we remove that from check and compensate here

devisor_upper_bound = 500
pos = 0
n = 0
n_devs = 0

while n_devs <= devisor_upper_bound:
	pos += 1
	n = next_tri_num(pos)
	n_devs = num_devisors(n)

print(str(n) + ' is the first to have more than ' + str(devisor_upper_bound) +' devisors (' + str(n_devs) + ')')